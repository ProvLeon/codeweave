generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                 @id @default(auto()) @map("_id") @db.ObjectId
  email              String                 @unique
  firstName          String
  lastName           String
  password           String
  profile            Profile?
  ownedDocuments     Document[]             @relation("OwnedDocuments")
  revisions          Revision[]
  ownedFolders       Folder[]               @relation("OwnedFolders")
  collaboratedDocs   DocumentCollaborator[]
  collaboratedFolders FolderCollaborator[]
  messages           Message[]
  messageReads       MessageRead[]
  roomParticipations RoomParticipant[]
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}


model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
}

model Document {
  id              String                 @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  content         String
  ownerId         String                 @db.ObjectId
  owner           User                   @relation("OwnedDocuments", fields: [ownerId], references: [id])
  folderId        String                 @db.ObjectId
  folder          Folder                 @relation(fields: [folderId], references: [id])
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  revisions       Revision[]
  collaborators   DocumentCollaborator[]
  deletedAt       DateTime?
}

model Folder {
  id              String                 @id @default(auto()) @map("_id") @db.ObjectId
  name            String                 @unique
  ownerId         String                 @db.ObjectId
  owner           User                   @relation("OwnedFolders", fields: [ownerId], references: [id])
  parentId        String?                @db.ObjectId
  parent          Folder?                @relation("Subfolders", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subfolders      Folder[]               @relation("Subfolders")
  documents       Document[]
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  collaborators   FolderCollaborator[]
  deletedAt       DateTime?
}

model Revision {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  documentId      String     @db.ObjectId
  document        Document   @relation(fields: [documentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviewerId      String     @db.ObjectId
  reviewer        User       @relation(fields: [reviewerId], references: [id])
  content         Json
  createdAt       DateTime   @default(now())
}

model DocumentCollaborator {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  document    Document @relation(fields: [documentId], references: [id])
  documentId  String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId

  @@unique([documentId, userId])
}

model FolderCollaborator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  folder    Folder   @relation(fields: [folderId], references: [id])
  folderId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  @@unique([folderId, userId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String   @db.ObjectId
  room      Room     @relation(fields: [roomId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  text      String
  readBy    MessageRead[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  messages   Message[]
  participants RoomParticipant[]
}

model RoomParticipant {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String @db.ObjectId

  @@unique([userId, roomId])
}

model MessageRead {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String   @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
}
